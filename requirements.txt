Here are the steps to set up the necessary AWS services, deploy the Lambda function, and schedule its execution using EventBridge to send notifications to Slack based on the status of the S3 bucket folder.

1. **Set up AWS services:**
   - There should be a S3 bucket with a desired name to store the files.
   - Configure a Slack webhook: Set up a Slack workspace and create an incoming webhook integration. Obtain the webhook URL.

2. **Create a new AWS Lambda function:**
   - Open the AWS Lambda console.
   - Click "Create function" and choose "Author from scratch".
   - Provide a name for the function.
   - Select the appropriate runtime (e.g., Python 3.8).
   - Configure the execution role with the necessary permissions [CloudWatchFullAccess, AWSLambdaBasicExecutionRole, AmazonS3ReadOnlyAccess].
   - Click "Create function".

3. **Write and deploy the Lambda function:**
   - In the function's code editor, write a code.
   - Save/Deploy the code.
   - Test the function by configuring a test event and executing it.
   - If the function executes successfully, proceed to the next step.

4. **Set up EventBridge rule:**
   - Open the AWS EventBridge console.
   - Click "Create rule".
   - Configure the rule details:
     - Rule name: Provide a name for the rule.
     - Description (optional): Add a description for the rule.
     - Define pattern: Select "Schedule" and configure the desired schedule using a Cron expression (e.g., `cron(0 0 * * ? *)` for once a day at midnight UTC).
   - Configure the target:
     - Select "Lambda function" as the target.
     - Choose the Lambda function you created in step 2.
   - EventBridge Scheduler requires permission to send events to the target, so give Amazon-EventBridge-Scheduler-Execution-Policy permission.
   - Click "Create".
   

5. **Test the scheduled execution:**
   - Wait for the scheduled time.
   - Check the Slack channel for the notification message generated by the Lambda function.
   - Verify that the message reflects the status of the S3 bucket folder for the current date.
   
   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Here are the permissions that we will require:

 1. **AmazonS3ReadOnlyAccess**:
 
   - Description: This policy provides read-only access to Amazon S3 (Simple Storage Service) resources.
   - Permissions:
        {
            "Effect": "Allow",
            "Action": [
                "s3:Get*",
                "s3:List*",
                "s3-object-lambda:Get*",
                "s3-object-lambda:List*"
            ],
            "Resource": "*"
        }
   


2. **CloudWatchFullAccess**:
   - Description: This policy grants full access to Amazon CloudWatch resources, including logs and metrics.
   
   - Permissions:
           "Effect": "Allow",
            "Action": [
                "autoscaling:Describe*",
                "cloudwatch:*",
                "logs:*",
                "sns:*",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "oam:ListSinks"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
            "Condition": {
                "StringLike": {
                    "iam:AWSServiceName": "events.amazonaws.com"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "oam:ListAttachedLinks"
            ],
            "Resource": "arn:aws:oam:*:*:sink/*"
        }



3. **AWSLambdaBasicExecutionRole**:

   - Description: This policy provides the basic execution role permissions for AWS Lambda functions.
   - Permissions:
   
        {
			"Effect": "Allow",
			"Action": "logs:CreateLogGroup",
			"Resource": "arn:aws:logs:region::*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogStream",
				"logs:PutLogEvents"
		]
	     	"Resource": [
				"arn:aws:logs:region:log-group:/aws/lambda/functionname:*"
			]
		}


4. **Amazon-EventBridge-Scheduler-Execution-Policy**:
   - Description: This policy is typically associated with a specific EventBridge rule for scheduling tasks.
   - Permissions:
     - {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": [
                "arn:aws:lambda:region:function:lambdafunctionname:*",
                "arn:aws:lambda:region:function:lambdafunctionname"
            ]
        }
